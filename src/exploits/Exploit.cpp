#include "../include/exploit/Exploit.h"
#include "utils/CommandLineExecute.h"
#include "data/ExploitScanRepository.h"
#include "data/DBConnector.h"
#include <regex>

Exploit::Exploit() = default;

std::string Exploit::exploitVulnerableServices(std::vector<std::string> &vulnerableServices, std::string &target) {
    std::string command;
    std::string activityType = "Exploit";

    for (const auto& service : vulnerableServices) {
        if (service == "vsftpd 2.3.4") {
            std::string exploitScriptPath = "../resources/scripts/ftp.sh";

            command.append(exploitScriptPath).append(" ").append(target);
            std::string resultOutput;
            bool exploitResult;

            resultOutput = CommandLineExecute::executeCommand(command.c_str());
            exploitResult = checkSuccess(resultOutput);

            auto conn = DBConnector::generateDatabaseConnectionInstance();

            // Result will be stored in the database after exploit running, successfully or not.
            if (conn) {
                ExploitScanRepository::createExploitScanRegister(conn, target, activityType, exploitResult);
            }
        }
    }
    return "";
}

bool Exploit::checkSuccess(const std::string& input) {
    std::regex pattern("Exploitation successful!");
    return std::regex_search(input, pattern);
}

