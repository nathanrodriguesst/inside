#include "mapping/VulnerabilityMapping.h"
#include <iostream>
#include <set>
#include "data/DBConnector.h"
#include "data/VulnerabilityRepository.h"

VulnerabilityMapping::VulnerabilityMapping() {
    knownVulnerableServices = {
        "vsftpd 2.3.4", "", ""
    };
}

std::vector<std::string> VulnerabilityMapping::findVulnerableServices(
        std::vector<ScanResult>& parsedScanVector,
        std::string &ip) {
    std::vector<std::string> vulnerableServices;

    for (auto &result : parsedScanVector) {
        if (knownVulnerableServices.find(result.version) != knownVulnerableServices.end()) {
            vulnerableServices.push_back(result.version);

            auto conn = DBConnector::generateDatabaseConnectionInstance();

            // If it's a match, result will be stored in the database
            if (conn) {
                VulnerabilityRepository::createVulnerableServiceRegister(conn,
                                                                         ip,
                                                                         result.port,
                                                                         result.version,
                                                                         result.service);
            }
        }
    }
    return vulnerableServices;
}
