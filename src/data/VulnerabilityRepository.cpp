#include "data/VulnerabilityRepository.h"
#include <mariadb/conncpp.hpp>
#include <iostream>

void VulnerabilityRepository::selectFromVulnerableServices(const std::unique_ptr<sql::Connection> &connection)
{
    if (!connection) {
        std::cerr << "Invalid database connection" << std::endl;
        return;
    }

    try {
        std::unique_ptr<sql::Statement> stmt(connection->createStatement());
        std::string query = "SELECT id, service, ip, port, priority FROM vulnerableServices";
        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery(query));

        while (res->next()) {
            int id = res->getInt("id");
            std::string service = static_cast<const char *>(res->getString("service"));
            std::string ip = static_cast<const char *>(res->getString("ip"));
            int port = res->getInt("port");
            std::string priority = static_cast<const char *>(res->getString("priority"));

            std::cout << "ID: " << id << ", Service: " << service
                      << ", IP: " << ip << ", Port: " << port
                      << ", Priority: " << priority << std::endl;
        }
    } catch (sql::SQLException& e) {
        std::cerr << "Error executing query: " << e.what() << std::endl;
    }
}

void VulnerabilityRepository::createVulnerableServiceRegister(const std::unique_ptr<sql::Connection> &conn,
                                                              std::string &ip, int port, std::string &version,
                                                              std::string &service) {
    if (!conn) {
        std::cerr << "Invalid database connection" << std::endl;
        return;
    }

    try {
        time_t rawtime;
        struct tm * timeinfo;
        char buffer[80];

        time (&rawtime);
        timeinfo = localtime(&rawtime);

        strftime(buffer,80,"%d-%m-%Y %I:%M:%S",timeinfo);
        std::string dateTime(buffer);

        std::unique_ptr<sql::PreparedStatement> pstmt(conn->prepareStatement(
                "INSERT INTO vulnerableServices (ip, service, port) VALUES (?, ?, ?, ?)"));

        pstmt->setString(1, ip);
        pstmt->setString(2, service);
        pstmt->setInt(3, port);
        pstmt->setDateTime(dateTime);

        pstmt->executeUpdate();
        std::cout << "Inserted record successfully." << std::endl;
    } catch (sql::SQLException& e) {
        std::cerr << "Error executing query: " << e.what() << std::endl;
    }
}