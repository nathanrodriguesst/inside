#include "data/VulnerabilityRepository.h"
#include <mariadb/conncpp.hpp>
#include <iostream>
#include "utils/TimeUtils.h"

void to_json(nlohmann::json& j, const VulnerableService& v) {
    j = nlohmann::json{
            {"id", v.id},
            {"service", v.service},
            {"ip", v.ip},
            {"port", v.port},
            {"date", v.date}
    };
}

std::vector<VulnerableService> VulnerabilityRepository::selectFromVulnerableServices(const std::unique_ptr<sql::Connection> &connection)
{
    std::vector<VulnerableService> results;

    if (!connection) {
        std::cerr << "Invalid database connection" << std::endl;
        return {};
    }

    try {
        std::unique_ptr<sql::Statement> stmt(connection->createStatement());
        std::string query = "SELECT id, service, ip, port, date FROM vulnerableServices";
        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery(query));

        while (res->next()) {
            VulnerableService serviceData;
            serviceData.id = res->getInt("id");
            serviceData.service = res->getString("service");
            serviceData.ip = res->getString("ip");
            serviceData.port = res->getInt("port");
            serviceData.date = res->getString("date");

            results.push_back(serviceData);
        }
    } catch (sql::SQLException& e) {
        std::cerr << "Error executing query: " << e.what() << std::endl;
        return {};
    }

    return results;
}


void VulnerabilityRepository::createVulnerableServiceRegister(const std::unique_ptr<sql::Connection> &conn,
                                                              std::string &ip, int port, std::string &version,
                                                              std::string &service) {
    if (!conn) {
        std::cerr << "Invalid database connection" << std::endl;
        return;
    }

    try {
        std::string currentTimeDate = TimeUtils::getCurrentDateTime();

        std::unique_ptr<sql::PreparedStatement> preparedStatement(conn->prepareStatement(
                "INSERT INTO vulnerableServices (ip, service, port, date) "
                "VALUES (?, ?, ?, STR_TO_DATE(?, '%d%m%Y%H%i%s%f'))"));

        preparedStatement->setString(1, ip);
        preparedStatement->setString(2, service);
        preparedStatement->setInt(3, port);
        preparedStatement->setString(4, currentTimeDate);

        preparedStatement->executeUpdate();
        std::cout << "Inserted record successfully." << std::endl;
    } catch (sql::SQLException& e) {
        std::cerr << "Error executing query: " << e.what() << std::endl;
    }
}

int VulnerabilityRepository::selectCountVulnerabilities(const std::unique_ptr<sql::Connection> &connection) {

    if (!connection) {
        std::cerr << "Invalid database connection" << std::endl;
        return {};
    }

    try {
        std::unique_ptr<sql::Statement> stmt(connection->createStatement());
        std::string query = "SELECT COUNT(*) AS total FROM vulnerableServices";
        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery(query));

        if (res->next()) {
            int totalRecords = res->getInt("total");
            return totalRecords;
        }
    } catch (sql::SQLException& e) {
        std::cerr << "Error executing query: " << e.what() << std::endl;
        return {};
    }

    return 0;
}